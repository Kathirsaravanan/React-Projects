import { useEffect, useState } from "react";
import { useLexicalComposerContext } from "@lexical/react/LexicalComposerContext";
import { $createTextNode, $getRoot, $createParagraphNode } from "lexical";
import { $createStyledElementNode } from "./nodes/StyledElementNode";
import { clearChunks } from "../../../DB/indexDB";

const CHUNK_SIZE = 30;
const CHUNK_HEIGHT = 1000;

function HtmlFileUploader({ scrollContainerRef }) {
  const [editor] = useLexicalComposerContext();
  const [allChunks, setAllChunks] = useState([]);
  const [centerChunkIndex, setCenterChunkIndex] = useState(2);
  const [visibleChunkIndices, setVisibleChunkIndices] = useState([]);
  const [loadedChunkRange, setLoadedChunkRange] = useState({ start: 0, end: 4 });

  const [hasTriggeredScrollDown, setHasTriggeredScrollDown] = useState(false);
  const [hasTriggeredScrollUp, setHasTriggeredScrollUp] = useState(false);

  const handleFileChange = (event) => {
    const file = event.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = async (e) => {
      const htmlString = e.target.result;
      const parser = new DOMParser();
      const doc = parser.parseFromString(htmlString, "text/html");
      const body = doc.body;
      const elements = Array.from(body.childNodes);

      console.log("📄 Total elements found:", elements.length);

      const chunked = [];
      for (let i = 0; i < elements.length; i += CHUNK_SIZE) {
        chunked.push(elements.slice(i, i + CHUNK_SIZE));
      }

      console.log("📦 Total chunks created:", chunked.length);
      await clearChunks();
      setAllChunks(chunked);
      setCenterChunkIndex(2);
      setLoadedChunkRange({ start: 0, end: 4 });
    };

    reader.readAsText(file);
  };

  const insertNodeFromDOM = (child, parentLexicalNode) => {
    if (child.nodeType === Node.TEXT_NODE) {
      const text = child.textContent.trim();
      if (text) {
        const paragraph = $createParagraphNode();
        paragraph.append($createTextNode(text));
        parentLexicalNode.append(paragraph);
      }
      return;
    }

    if (child.nodeType !== Node.ELEMENT_NODE) return;

    const tag = child.tagName.toLowerCase();
    const style = child.getAttribute("style") || "";
    const lexicalNode = $createStyledElementNode(style, tag);

    if (lexicalNode) {
      parentLexicalNode.append(lexicalNode);
      Array.from(child.childNodes).forEach((nested) =>
        insertNodeFromDOM(nested, lexicalNode)
      );
    }
  };

  const getRequiredChunkRange = (centerIndex) => {
    const start = Math.max(0, centerIndex - 2);
    const end = Math.min(allChunks.length - 1, centerIndex + 2);
    return { start, end };
  };

  const loadChunksWindow = (centerIndex) => {
    const container = scrollContainerRef.current;
    let scrollRatio = 0;

    if (container && container.scrollHeight > container.clientHeight) {
      scrollRatio = container.scrollTop / (container.scrollHeight - container.clientHeight);
    }

    console.log("📍 Scroll ratio before update:", scrollRatio.toFixed(3));
    console.log(`🧠 Updating chunks around Center Index: ${centerIndex}`);

    const newRange = getRequiredChunkRange(centerIndex);
    const indicesToLoad = [];
    for (let i = newRange.start; i <= newRange.end; i++) {
      indicesToLoad.push(i);
    }

    editor.update(() => {
      const root = $getRoot();
      root.clear();

      indicesToLoad.forEach((index) => {
        const chunk = allChunks[index];
        if (!chunk) return;
        chunk.forEach((child) => {
          try {
            insertNodeFromDOM(child, root);
          } catch (err) {
            console.error(`❌ Error inserting node from chunk ${index}:`, err);
          }
        });
      });
    });

    setVisibleChunkIndices(indicesToLoad);
    setLoadedChunkRange(newRange);

    if (container && scrollRatio > 0) {
      setTimeout(() => {
        const newScrollHeight = container.scrollHeight;
        const newClientHeight = container.clientHeight;
        if (newScrollHeight > newClientHeight) {
          const targetScrollTop = scrollRatio * (newScrollHeight - newClientHeight);
          container.scrollTop = targetScrollTop;
          console.log(`📍 Restored scroll position to ratio: ${scrollRatio.toFixed(3)}`);
        }
      }, 100);
    }

    console.log(`✅ Loaded chunks: [${indicesToLoad.join(", ")}]`);
  };

  const handleScroll = () => {
    const container = scrollContainerRef.current;
    if (!container || allChunks.length === 0) return;

    const { scrollTop, scrollHeight, clientHeight } = container;
    const scrollRatio = scrollTop / (scrollHeight - clientHeight);
    console.log("🌀 Current Scroll Ratio:", scrollRatio.toFixed(2));

    if (scrollRatio > 0.6 && centerChunkIndex < allChunks.length - 3) {
      if (!hasTriggeredScrollDown) {
        console.log(`➡ Reached 60%+ | Loading next chunk: ${centerChunkIndex + 1}`);
        setCenterChunkIndex(centerChunkIndex + 1);
        setHasTriggeredScrollDown(true);
      }
    } else if (scrollRatio < 0.5 && hasTriggeredScrollDown) {
      console.log("🔄 Resetting Down Scroll Trigger (scrolled above 50%)");
      setHasTriggeredScrollDown(false);
    }

    if (scrollRatio < 0.4 && centerChunkIndex > 2) {
      if (!hasTriggeredScrollUp) {
        console.log(`⬅ Reached 40%- | Loading previous chunk: ${centerChunkIndex - 1}`);
        setCenterChunkIndex(centerChunkIndex - 1);
        setHasTriggeredScrollUp(true);
      }
    } else if (scrollRatio > 0.5 && hasTriggeredScrollUp) {
      console.log("🔄 Resetting Up Scroll Trigger (scrolled below 50%)");
      setHasTriggeredScrollUp(false);
    }
  };

  const debounce = (func, delay) => {
    let timeout;
    return (...args) => {
      clearTimeout(timeout);
      timeout = setTimeout(() => func(...args), delay);
    };
  };

  useEffect(() => {
    if (allChunks.length > 0) {
      console.log(`🔄 useEffect | Loading Center Chunk: ${centerChunkIndex}`);
      loadChunksWindow(centerChunkIndex);
    }
  }, [centerChunkIndex, allChunks]);

  useEffect(() => {
    const container = scrollContainerRef.current;
    if (container) {
      const debouncedScroll = debounce(handleScroll, 200);
      container.addEventListener("scroll", debouncedScroll, { passive: true });
      return () => container.removeEventListener("scroll", debouncedScroll);
    }
  }, [centerChunkIndex, allChunks, hasTriggeredScrollDown, hasTriggeredScrollUp]);

  return (
    <div className="p-2">
      <input type="file" accept=".html" onChange={handleFileChange} />
      {allChunks.length > 0 && (
        <div className="mt-2">
          <p className="text-sm text-green-600">
            📦 Showing chunks: {visibleChunkIndices.map(i => i + 1).join(", ")} / {allChunks.length}
          </p>
          <p className="text-xs text-blue-500">
            🎯 Center Chunk: {centerChunkIndex + 1} | Loaded Range: {loadedChunkRange.start + 1} - {loadedChunkRange.end + 1}
          </p>
          <p className="text-xs text-gray-500">
            🔄 Dynamic Sliding: 5 chunks loaded, auto-switch as you scroll
          </p>
        </div>
      )}
    </div>
  );
}

export default HtmlFileUploader;
