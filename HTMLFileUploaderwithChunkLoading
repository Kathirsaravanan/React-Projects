import { useEffect, useLayoutEffect, useState } from "react";
import { useLexicalComposerContext } from "@lexical/react/LexicalComposerContext";
import { $getRoot, $createTextNode, $createParagraphNode } from "lexical";
import { $createStyledElementNode } from "./nodes/StyledElementNode";

const CHUNK_SIZE = 30;

function HtmlFileUploader() {
  const [editor] = useLexicalComposerContext();
  const [allChunks, setAllChunks] = useState([]);
  const [currentChunkIndex, setCurrentChunkIndex] = useState(0);

  const handleFileChange = (event) => {
    const file = event.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      const htmlString = e.target.result;
      const parser = new DOMParser();
      const doc = parser.parseFromString(htmlString, "text/html");
      const body = doc.body;

      const elements = Array.from(body.childNodes);
      const chunked = [];
      for (let i = 0; i < elements.length; i += CHUNK_SIZE) {
        chunked.push(elements.slice(i, i + CHUNK_SIZE));
      }

      setAllChunks(chunked);
      setCurrentChunkIndex(0); // Load first chunk
    };

    reader.readAsText(file);
  };

  // Load current chunk into Lexical
  useEffect(() => {
    if (!allChunks.length || currentChunkIndex >= allChunks.length || currentChunkIndex < 0) return;

    const chunk = allChunks[currentChunkIndex];
    editor.update(() => {
      const root = $getRoot();
      root.clear();

      // Top sentinel
      const topSentinel = $createParagraphNode();
      topSentinel.setFormat("left");
      topSentinel.append($createTextNode("↑"));
      root.append(topSentinel);

      // Chunk content
      chunk.forEach((child) => {
        insertNodeFromDOM(child, root);
      });

      // Bottom sentinel
      const bottomSentinel = $createParagraphNode();
      bottomSentinel.setFormat("left");
      bottomSentinel.append($createTextNode("↓"));
      root.append(bottomSentinel);
    });
  }, [currentChunkIndex, allChunks, editor]);

  // Scroll detection with delayed observer setup
  useLayoutEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const text = entry.target.textContent?.trim();
          if (!entry.isIntersecting || !text) return;

          if (text === "↓" && currentChunkIndex < allChunks.length - 1) {
            console.log("⬇️ Scrolled down");
            setCurrentChunkIndex((prev) => prev + 1);
          }

          if (text === "↑" && currentChunkIndex > 0) {
            console.log("⬆️ Scrolled up");
            setCurrentChunkIndex((prev) => prev - 1);
          }
        });
      },
      {
        root: document.querySelector(".editor-scroll-container"),
        threshold: 1.0,
      }
    );

    const observeSentinels = () => {
      const topEl = Array.from(document.querySelectorAll(".editor-scroll-container p")).find(
        (el) => el.textContent?.trim() === "↑"
      );
      const bottomEl = Array.from(document.querySelectorAll(".editor-scroll-container p")).find(
        (el) => el.textContent?.trim() === "↓"
      );

      if (topEl) observer.observe(topEl);
      if (bottomEl) observer.observe(bottomEl);
    };

    const timeoutId = setTimeout(observeSentinels, 100); // Delay to ensure DOM is ready

    return () => {
      clearTimeout(timeoutId);
      observer.disconnect();
    };
  }, [currentChunkIndex, allChunks.length]);

  const insertNodeFromDOM = (child, parentLexicalNode) => {
    let lexicalNode = null;

    if (child.nodeType === Node.TEXT_NODE) {
      const text = child.textContent.trim();
      if (text) {
        parentLexicalNode.append($createTextNode(text));
      }
      return;
    }

    if (child.nodeType !== Node.ELEMENT_NODE) return;

    const tag = child.tagName.toLowerCase();
    const style = child.getAttribute("style") || "";

    lexicalNode = $createStyledElementNode(style, tag);
    if (lexicalNode) {
      parentLexicalNode.append(lexicalNode);
      Array.from(child.childNodes).forEach((nested) =>
        insertNodeFromDOM(nested, lexicalNode)
      );
    }
  };

  return (
    <div className="p-2">
      <input type="file" accept=".html" onChange={handleFileChange} />
      {allChunks.length > 0 && (
        <p className="text-sm text-green-600 mt-2">
          📦 Showing chunk {currentChunkIndex + 1} of {allChunks.length}
        </p>
      )}
    </div>
  );
}

export default HtmlFileUploader;
