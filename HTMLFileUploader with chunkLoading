import { useEffect, useState, useRef } from "react";
import { useLexicalComposerContext } from "@lexical/react/LexicalComposerContext";
import { $createTextNode, $getRoot, $createParagraphNode } from "lexical";
import { $createStyledElementNode } from "./nodes/StyledElementNode";
import { clearChunks } from "../../../DB/indexDB";

const CHUNK_SIZE = 30;

function HtmlFileUploader({ scrollContainerRef }) {
  const [editor] = useLexicalComposerContext();
  const [allChunks, setAllChunks] = useState([]);
  const [visibleChunks, setVisibleChunks] = useState(new Set());
  const centerMarkerRef = useRef(null);
  const anchorElementRef = useRef(null);

  const handleFileChange = (event) => {
    const file = event.target.files?.[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = async (e) => {
      const htmlString = e.target.result;
      const parser = new DOMParser();
      const doc = parser.parseFromString(htmlString, "text/html");
      const body = doc.body;
      const elements = Array.from(body.childNodes);
      const chunked = [];
      for (let i = 0; i < elements.length; i += CHUNK_SIZE) {
        chunked.push(elements.slice(i, i + CHUNK_SIZE));
      }
      await clearChunks();
      setAllChunks(chunked);
      setVisibleChunks(new Set([0, 1, 2, 3, 4]));
      console.log("Initial chunks loaded: 1 to 5");
    };
    reader.readAsText(file);
  };

  const insertNodeFromDOM = (child, parentLexicalNode) => {
    if (child.nodeType === Node.TEXT_NODE) {
      const text = child.textContent.trim();
      if (text) {
        const paragraph = $createParagraphNode();
        paragraph.append($createTextNode(text));
        parentLexicalNode.append(paragraph);
      }
      return;
    }
    if (child.nodeType !== Node.ELEMENT_NODE) return;
    const tag = child.tagName.toLowerCase();
    const style = child.getAttribute("style") || "";
    const lexicalNode = $createStyledElementNode(style, tag);
    if (lexicalNode) {
      parentLexicalNode.append(lexicalNode);
      Array.from(child.childNodes).forEach((nested) =>
        insertNodeFromDOM(nested, lexicalNode)
      );
    }
  };

  const findElementAtCenter = () => {
    const marker = centerMarkerRef.current;
    if (!marker) return null;

    const markerRect = marker.getBoundingClientRect();
    const centerY = markerRect.top + markerRect.height / 2;

    const elements = Array.from(document.querySelectorAll("p"));
    for (const el of elements) {
      const rect = el.getBoundingClientRect();
      if (rect.top <= centerY && rect.bottom >= centerY) {
        anchorElementRef.current = el;
        console.log("Captured element near center for scroll retention:", el);
        return el;
      }
    }
    console.log("No element found near center for retention");
    return null;
  };

  const scrollElementToSameViewportPosition = (el) => {
    if (!el || !scrollContainerRef.current) {
      console.log("No anchor element or scroll container to restore position");
      return;
    }

    const container = scrollContainerRef.current;
    const containerRect = container.getBoundingClientRect();
    const elRect = el.getBoundingClientRect();

    const offset = elRect.top - containerRect.top - container.clientHeight / 2 + el.clientHeight / 2;
    container.scrollTop += offset;
    console.log("Scroll position adjusted to keep anchor element centered:", el);
  };

  const appendChunkToEditor = (index) => {
    if (!allChunks[index]) return;
    editor.update(() => {
      const root = $getRoot();

      const sentinel = $createParagraphNode();
      sentinel.append($createTextNode(`chunk${index + 1}`));
      root.append(sentinel);

      allChunks[index].forEach((child) => {
        try {
          insertNodeFromDOM(child, root);
        } catch (err) {
          console.error(`Error inserting node from chunk ${index}:`, err);
        }
      });
    });
    console.log(`Appended chunk ${index + 1}`);
  };

  const removeChunkFromEditor = (index) => {
    editor.update(() => {
      const root = $getRoot();
      const children = root.getChildren();
      children.forEach((node) => {
        if (node.getTextContent().includes(`chunk${index + 1}`)) {
          node.remove();
        }
      });
    });
    console.log(`Removed chunk ${index + 1}`);
  };

  useEffect(() => {
    if (allChunks.length === 0 || visibleChunks.size === 0) return;

    const anchorElement = findElementAtCenter();
    const currentChunks = Array.from(visibleChunks);

    console.log("Re-rendering visible chunks:", currentChunks);

    editor.update(() => {
      const root = $getRoot();
      root.clear();
      currentChunks.forEach((index) => {
        appendChunkToEditor(index);
      });
    });

    setTimeout(() => {
      scrollElementToSameViewportPosition(anchorElementRef.current);
    }, 100);
  }, [visibleChunks]);

  useEffect(() => {
    const container = scrollContainerRef.current;
    if (!container) return;

    const observer = new IntersectionObserver(
      (entries) => {
        for (const entry of entries) {
          const text = entry.target.textContent;
          if (!text || !entry.isIntersecting) continue;

          const match = text.match(/chunk(\d+)/);
          if (!match) continue;

          const index = parseInt(match[1], 10) - 1;
          console.log("Intersecting chunk:", index + 1);

          const newChunks = new Set(visibleChunks);

          // Forward scroll
          if (index === Math.max(...visibleChunks) - 1 && index + 1 < allChunks.length) {
            newChunks.delete(Math.min(...visibleChunks));
            newChunks.add(index + 2);
            console.log("Loading next chunk, updated visibleChunks:", Array.from(newChunks));
            setVisibleChunks(newChunks);
          }

          // Backward scroll
          if (index === Math.min(...visibleChunks) + 1 && index - 1 >= 0) {
            newChunks.delete(Math.max(...visibleChunks));
            newChunks.add(index - 2);
            console.log("Loading previous chunk, updated visibleChunks:", Array.from(newChunks));
            setVisibleChunks(newChunks);
          }
        }
      },
      { root: container, threshold: 1.0 }
    );

    setTimeout(() => {
      const sentinels = Array.from(container.querySelectorAll("p"))
        .filter(p => p.textContent.includes("chunk"));
      sentinels.forEach((el) => observer.observe(el));
      console.log("Observing sentinels for chunks:", sentinels.length);
    }, 100);

    return () => observer.disconnect();
  }, [visibleChunks]);

  return (
    <div className="p-2">
      <input type="file" accept=".html" onChange={handleFileChange} />
      <div
        ref={centerMarkerRef}
        style={{
          position: "absolute",
          top: "50%",
          left: 0,
          width: "100%",
          height: "1px",
          pointerEvents: "none",
          zIndex: -1,
        }}
      />
    </div>
  );
}

export default HtmlFileUploader;
