import React from 'react';
import { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';
import {
  $createTextNode,
  $createHeadingNode,
  $createListNode,
  $createListItemNode,
  $getRoot,
} from 'lexical';
import { $createStyledElementNode } from './nodes/StyledElementNode'; // Update path if needed

function HtmlFileUploader() {
  const [editor] = useLexicalComposerContext();

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (!file) {
      alert('Please upload a valid HTML or HTM file.');
      return;
    }

    const reader = new FileReader();

    reader.onload = (e) => {
      try {
        const htmlContent = e.target.result;
        const parser = new DOMParser();
        const doc = parser.parseFromString(htmlContent, 'text/html');
        const body = doc.body;

        if (!body) {
          console.error('❌ Failed to parse HTML body.');
          return;
        }

        editor.update(() => {
          const root = $getRoot();
          root.clear();

          const walkDOM = (domNode, lexicalParent) => {
            for (let child of domNode.childNodes) {
              if (child.nodeType === 3) {
                const text = child.textContent;
                if (text.trim()) {
                  const textNode = $createTextNode(text.trim());
                  lexicalParent.append(textNode);
                }
              } else if (child.nodeType === 1) {
                const tag = child.tagName.toLowerCase();
                const style = child.getAttribute('style') || '';

                // Handle inline tags separately
                if (['b', 'strong', 'i', 'em', 'u', 'span'].includes(tag)) {
                  const text = child.textContent.trim();
                  if (text) {
                    const textNode = $createTextNode(text);
                    const format = getTextFormat(tag);
                    if (format) {
                      textNode.setFormat(format);
                    }
                    if (style) {
                      textNode.setStyle(style);
                    }
                    lexicalParent.append(textNode);
                  }
                  continue; // Skip recursion for inline
                }

                let lexicalNode = null;

                switch (tag) {
                  case 'p':
                  case 'div':
                    lexicalNode = $createStyledElementNode(style);
                    break;

                  case 'h1':
                  case 'h2':
                  case 'h3':
                    lexicalNode = $createHeadingNode(tag);
                    break;

                  case 'ul':
                  case 'ol':
                    lexicalNode = $createListNode(tag === 'ul' ? 'bullet' : 'number');
                    break;

                  case 'li':
                    lexicalNode = $createListItemNode();
                    break;

                  case 'table':
                  case 'thead':
                  case 'tbody':
                  case 'tfoot':
                  case 'tr':
                  case 'th':
                  case 'td':
                    lexicalNode = $createStyledElementNode(style);
                    break;

                  case 'hr':
                    lexicalNode = $createStyledElementNode(style);
                    lexicalNode.append($createTextNode('────────'));
                    break;

                  default:
                    console.warn('🚫 Unsupported tag ignored:', tag);
                    lexicalNode = $createStyledElementNode(style);
                    lexicalNode.append(
                      $createTextNode(`[Unsupported <${tag}>] ${child.textContent.trim()}`)
                    );
                }

                if (lexicalNode) {
                  lexicalParent.append(lexicalNode);
                  walkDOM(child, lexicalNode); // Recurse
                }
              }
            }
          };

          walkDOM(body, root);
          console.log('✅ HTML rendering complete.');
        });
      } catch (err) {
        console.error('💥 Error parsing HTML:', err);
        alert('Error while rendering HTML: ' + err.message);
      }
    };

    reader.onerror = (err) => {
      console.error('❌ FileReader error:', err);
      alert('Failed to read HTML file.');
    };

    reader.readAsText(file);
  };

  const getTextFormat = (tag) => {
    switch (tag) {
      case 'b':
      case 'strong':
        return 'bold';
      case 'i':
      case 'em':
        return 'italic';
      case 'u':
        return 'underline';
      default:
        return '';
    }
  };

  return (
    <div className="my-2">
      <label htmlFor="html-upload" className="cursor-pointer bg-blue-600 text-white px-4 py-2 rounded">
        Upload HTML/HTM File
      </label>
      <input
        id="html-upload"
        type="file"
        accept=".html,.htm"
        onChange={handleFileChange}
        className="hidden"
      />
    </div>
  );
}

export default HtmlFileUploader;
